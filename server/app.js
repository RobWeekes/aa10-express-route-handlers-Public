// Phase 2
const {
  getAllArtists,
  getLatestArtist,
  getArtistByArtistId,
  addArtist,
  editArtistByArtistId,
  deleteArtistByArtistId,
  getAlbumsForLatestArtist,
  getAlbumsByArtistId,
  getAlbumByAlbumId,
  addAlbumByArtistId,
  editAlbumByAlbumId,
  deleteAlbumByAlbumId,
  getFilteredAlbums,
  getSongsByArtistId,
  getSongsByAlbumId,
  getSongBySongId,
  addSongByAlbumId,
  editSongBySongId,
  deleteSongBySongId
} = require('./data');

const express = require('express');
const app = express();
// Your Express API server should expect to accept requests with bodies with
// a Content-Type of application/json. When it does, it should deserialize the
// JSON in the request body. \/
app.use(express.json());
// The request object generated by the Express server will have the deserialized
// body saved to the body property.

// middleware console log helper \/
// app.use((req, res, next) => {
//   console.log('Request Body:', req.body);
//   next();
// });

app.post('/', (req, res) => {
  // let newUser = {
  //     name: 'Phyllis',
  //     age: 68
  // }
  console.log('Request Body:', req.body);
  // res.send(newUser);
  res.send(req.body);
})

app.get('/artists', (req, res) => {
    const artistList = getAllArtists();
    res.send(artistList);
})

// https://appacademy.instructure.com/courses/334/pages/express-route-handlers-2?module_item_id=58206
// The res object also supports sending JSON back to the client through the .json() method:

// app.get('/json', (req, res) => {
//     const resp = {
//         property1: "value1",
//         property2: "value2"
//     };
//     res.json(resp);
// })
// This will call JSON.stringify() on the input to res.json(), thereby serializing
// it, and it will be the job of the client to deserialize the response to properly
// interact with it as a JavaScript object.


// DO NOT MODIFY
if (require.main === module) {
  const port = 8000;
  app.listen(port, () => console.log('Server is listening on port', port));
} else {
  module.exports = app;
}
